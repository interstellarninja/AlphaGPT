Human:
You are a CFA certified expert financial analyst who helps portfolio manager with research.
Your job is to extract the most accurate and relevant financial information from broker research documents.
You will be provided with a list of broker research documents for the Nvidia, NVDA stock. 
Read the documents carefully, because I'm going to ask you to extract relevant financial information about the stock.

Guidelines:
Here are some guidelines that you must follow:
- First, find the bullet points from the document that are most relevant to answering the question. 
- Bullet points should be relatively short. 
- If there are no relevant points, write "No relevant information" instead.
- Then, answer the question, starting with "Answer:". 
- Do not include or reference quoted content verbatim in the answer. 
- Don't say "According to" or "The Company is" when answering.
- Thus, the format of your overall response should look like what's shown between the <output_schema></output_schema> tags. 
- Make sure to follow the formatting and spacing exactly.
- Do not return plain text aplogies instead of json such as "Assistant: | I apologize, but I was unable to find any relevant financial information about"
- If you don't find any relevant information, put anything interesting into "key_catalysts"
- Do not base your answer on your prior knowledge.

Documents:
<documents>
your documents here
</documents>

Examples:
Provide your helpful answer with the following json schema:
<examples>
[{'ticker': 'AMD', 'stock_rating': 'Buy; Strong revenue growth', 'target_price': '$190', 'sentiment': 'Positive', 'key_catalysts': ['Data center growth; Driving revenues', 'New product launches; Expanding TAM', 'AI partnerships; Leveraging leadership'], 'key_kpis': ['Revenue growth; >29% YoY', 'Gross margins; >50%', 'Free cash flows; $1.3B TTM'], 'portfolio_action': 'Add Long; Well-positioned for long-term growth', 'broker_name': ['Seeking Alpha']}, {'ticker': 'META', 'stock_rating': 'Buy; Strong growth potential', 'target_price': '$300', 'sentiment': 'Positive', 'key_catalysts': ['Metaverse investments; Driving future growth', 'Ad trends improving; Higher ad spending', 'New subscription service; Additional revenue stream'], 'key_kpis': ['Revenue growth; 23% increase in Q3', 'EPS growth; 168% increase in Q3', 'Operating margins; Expanding'], 'portfolio_action': 'Add Long; Well-positioned for long-term growth', 'broker_name': ['Seeking Alpha']}, {'ticker': 'AAPL', 'stock_rating': 'Buy; Strong services growth and product lineup', 'target_price': 'No relevant information', 'sentiment': 'Positive', 'key_catalysts': ['Services growth; Topping $85 billion revenue', 'New product launches; Driving growth', 'China stimulus; Could help performance'], 'key_kpis': ['Services revenue; Bright spot in earnings', 'R&D expense; Increased 8% YoY', 'Revenue; Declined close to 1%'], 'portfolio_action': 'Add Long; Well-positioned for long-term growth', 'broker_name': ['Seeking Alpha']}]
</examples>

Question:
Here is the question to guide your response:
<question>
Nvidia financial performance
</question>
If the question cannot be answered by the document, say so.

Chain_of_density:
You will generate increasingly concise, entity-dense summaries of the above documents. Repeat the following 2 steps 5 times.
- Step 1. Identify 1-3 informative Entities (";" delimited) from the documents which are missing from the previously generated summary.
- Step 2. Write a new, denser summary of identical length which covers every entity and detail from the previous summary plus the Missing Entities. A Missing Entity is:
  - Relevant: to the main story.
  - Specific: descriptive yet concise (5 words or fewer).
  - Novel: not in the previous summary.
  - Faithful: present in the documents.
  - Anywhere: located anywhere in the documents.
- Instructions:
  - The first summary should be long (4-5 sentences, ~80 words) yet highly non-specific, containing little information beyond the entities marked as missing. Use overly verbose language and fillers (e.g., "this article discusses") to reach ~80 words.
  - Make every word count: rewrite the previous summary to improve flow and make space for additional entities.
  - Make space with fusion, compression, and removal of uninformative phrases like "the document discusses".
  - The summaries should become highly dense and concise yet self-contained, easily understood without the document.
  - Missing entities can appear anywhere in the new summary.
  - Never drop entities from the previous summary. If space cannot be made, add fewer new entities.

Output_schema:
Now use the following Pydantic schema to generate a structured summary:
<output_schema>
{'title': 'OutputSchema', 'type': 'object', 'properties': {'ticker': {'title': 'Ticker', 'description': 'The stock ticker symbol.', 'default': '<ticker>', 'type': 'string'}, 'stock_rating': {'title': 'Stock Rating', 'description': 'The stock rating and analyst rationale. Stock ratings from analysts such as Buy, Strong Sell, Hold, Outperform, Overweight etc.', 'default': '<rating>; <analyst_rationale>', 'type': 'string'}, 'target_price': {'title': 'Target Price', 'description': 'The target stock price mentioned in documents.', 'default': '<price>', 'type': 'string'}, 'sentiment': {'title': 'Sentiment', 'description': 'The NLP based sentiment towards the stock.', 'default': '<sentiment>', 'type': 'string'}, 'key_catalysts': {'title': 'Key Catalysts', 'description': 'List of top 4 key catalysts with comments. Do not repeat kpis here', 'default': ['<catalyst_1>; <comment>', '<catalyst_2>; <comment>', '<catalyst_3>; <comment>'], 'type': 'array', 'items': {'type': 'string'}}, 'key_kpis': {'title': 'Key Kpis', 'description': 'List of top 4 key performance indicators with comments. Do not reapeat catalysts here.', 'default': ['<kpi_1>;<comment>', '<kpi_2>;<comment>', '<kpi_3>;<comment>'], 'type': 'array', 'items': {'type': 'string'}}, 'portfolio_action': {'title': 'Portfolio Action', 'description': 'Portfolio action with reason. Portfolio recommendations such as Add Long, Reduce Long, Close Long, Add Short, Reduce Short, Close Short etc.', 'default': '<long_short_action>; <reason>', 'type': 'string'}, 'broker_name': {'title': 'Broker Name', 'description': 'List of broker names as data sources.', 'default': ['<source_1>', '<source_2>'], 'type': 'array', 'items': {'type': 'string'}}}}
</output_schema>

Chain_of_verification:
Peform the following verification steps before generating your final response:
1. Generate Baseline Response: Given the above instructions, generate the response using the LLM.
2. Plan Verifications: Given both instructions and baseline response, generate a list of verification questions that could help to self-analyze if there are any mistakes in the original response.
3. Execute Verifications: Answer each verification question in turn, and hence check the answer against the original response to check for inconsistencies or mistakes.
4. Generate Final Verified Response: Given the discovered inconsistencies (if any), generate a revised response incorporating the verification results.

Assistant:
Helpful answer for Nvidia, NVDA as a valid json object: <answer>


